{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a319b7b0-c758-44ea-84d0-bdade2d42362",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns \n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5ab23008-2f45-4b02-a1b9-d09c3602a069",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_data = pd.read_csv(\"1-studyhours.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "90cd5993-50e1-4a67-93f6-0903f8565303",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Study Hours</th>\n",
       "      <th>Exam Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.9</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9.6</td>\n",
       "      <td>57.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.5</td>\n",
       "      <td>42.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.4</td>\n",
       "      <td>65.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14.4</td>\n",
       "      <td>78.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Study Hours  Exam Score\n",
       "0          3.9        40.0\n",
       "1          9.6        57.1\n",
       "2          4.5        42.7\n",
       "3         11.4        65.1\n",
       "4         14.4        78.7"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "df7d58a8-569a-453c-aca8-3925ea71b0e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 33 entries, 0 to 32\n",
      "Data columns (total 2 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   Study Hours  33 non-null     float64\n",
      " 1   Exam Score   33 non-null     float64\n",
      "dtypes: float64(2)\n",
      "memory usage: 660.0 bytes\n"
     ]
    }
   ],
   "source": [
    "df_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "e3330dd5-98ca-4b96-af83-a48b24573f54",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Study Hours</th>\n",
       "      <td>33.0</td>\n",
       "      <td>15.772727</td>\n",
       "      <td>7.608723</td>\n",
       "      <td>3.0</td>\n",
       "      <td>9.6</td>\n",
       "      <td>17.4</td>\n",
       "      <td>21.3</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Exam Score</th>\n",
       "      <td>33.0</td>\n",
       "      <td>74.612121</td>\n",
       "      <td>18.711206</td>\n",
       "      <td>40.0</td>\n",
       "      <td>58.5</td>\n",
       "      <td>78.8</td>\n",
       "      <td>90.8</td>\n",
       "      <td>100.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             count       mean        std   min   25%   50%   75%    max\n",
       "Study Hours   33.0  15.772727   7.608723   3.0   9.6  17.4  21.3   30.0\n",
       "Exam Score    33.0  74.612121  18.711206  40.0  58.5  78.8  90.8  100.0"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_data.describe().T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f5f94040-6d5b-4ffc-9684-372237614d93",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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QcLqxgC6O7/DjiQ1NDRow4YN2rdvn2w2m5KSknTttdeqR48ega4PQCexujGA7s7vsPPZZ5/p6quv1uHDhzVixAgZhqFPP/1UcXFx+vvf/66EhIRg1Amgg1jdGEB35/dsrHvvvVcJCQk6dOiQdu3apd27d+vgwYOKj4/XvffeG4waAXQCqxsD6O78no3Vp08f7dixQyNHjvQ5/o9//EOXXnqpjh49GtACuwKzsdAdsLoxAKsJ2mwsu92umpqaFsePHj2q3r17+/tyALoIO2oD6K787saaNm2a/uM//kMffvihDMOQYRjasWOH7rzzTl177bXBqBFAgDSvbjzjwqFKTRhE0AHQLfgddn7/+98rISFBqampioyMVGRkpC699FKdc845+t3vfheMGgEAADrM726s/v3769VXX9Vnn32mffv2yTAMJSUl6ZxzzglGfQAAAJ3SoXV2JOmcc84h4AAAANPzuxvrxhtv1G9+85sWxx9//HHddNNNASkKAAAgUPwOO/n5+brmmmtaHJ8yZYref//9gBQFAAAQKH6HnbammPfq1UvV1dUBKQoAACBQ/A47ycnJevnll1scX7dunZKSkgJSFAAAQKD4PUD54Ycf1syZM3XgwAFNmjRJkvTOO+/opZde0t/+9reAFwgAANAZfoeda6+9Vhs2bFB2drb+67/+S1FRURo1apTefvttTZgwIRg1AgAAdJjfe2NZEXtjAQAQfoK2N9aJamtr9fLLL+vYsWNKT09XYmJiZ14OAAAg4NoddhYuXKj6+nrvlhD19fW65JJLVFJSoujoaC1atEh5eXlKTU0NWrEAAAD+avdsrDfffFNXXHGF9/kLL7yggwcPav/+/aqqqtJNN92kRx99NChFAgAAdFS7w87Bgwd9ppZv3rxZN954o4YNGyabzab77rtPu3fvDkqRAAAAHdXusBMREaETxzLv2LFDl1xyifd5//79VVVVFdjqAAAAOqndYee8887Txo0bJUnFxcU6ePCgLr/8cu/5L7/8Uk6nM+AFnn322bLZbC0ed999tyTJMAxlZWXJ7XYrKipKEydOVHFxccDrAAAA4andYWfhwoV64IEHdMUVV+iKK67Q1Vdfrfj4eO/5N954Q+PGjQt4gQUFBSorK/M+8vLyJMm76Whubq5WrFihlStXqqCgQC6XS+np6aqpqQl4LQAAIPy0O+zMnDlTb7zxhkaNGqWf//znLbaMiI6O1vz58wNe4ODBg+VyubyP119/XQkJCZowYYIMw9CTTz6pBx98UDfccIOSk5O1Zs0affvtt3rxxRcDXgsAAAg/YbWoYH19vdxutxYsWKBf/vKX+vzzz5WQkKBdu3bpoosu8l43Y8YM9e/fX2vWrGn1derq6lRXV+d9Xl1drbi4OBYVBAAgjLR3UUG/NwINpQ0bNuibb77RnDlzJEnl5eWS1GKskNPp9J5rTU5OjhwOh/cRFxcXtJoBAEBohVXY+etf/6qpU6fK7Xb7HLfZbD7PDcNocexES5Yskcfj8T4OHToUlHoBAEDodWq7iK705Zdf6u2339Yrr7ziPeZyuSQ1tfDExsZ6j1dUVJxyZpjdbpfdbg9esQAAwDTCpmVn9erVGjJkiK655hrvsfj4eLlcLu8MLalpXE9+fr7S0tJCUSYAADCZsGjZaWxs1OrVq5WRkaGePf9dss1mU2ZmprKzs5WYmKjExERlZ2crOjpas2bNCmHFAADALPwOO5WVlXrkkUf07rvvqqKiQo2NjT7njxw5ErDimr399ts6ePCg7rjjjhbnFi1apOPHj2v+/PmqqqpSSkqKNm/erJiYmIDXAQAAwo/fU8+nTp2qAwcO6Cc/+YmcTmeLgcAZGRkBLbArtHfqGgAAMI/2fn/73bKzdetWbd26VaNHj+5UgQAAAF3B7wHK5513no4fPx6MWgAAAALO77Dzpz/9SQ8++KDy8/NVWVmp6upqnwcAAICZ+N2N1b9/f3k8Hk2aNMnnePNCfg0NDQErDgAAoLP8Djs//OEP1bt3b7344outDlAGAAAwE7/DTlFRkXbv3q0RI0YEox4AAICA8nvMztixY9lLCgAAhA2/W3buuece3XfffVq4cKFGjhypXr16+ZwfNWpUwIoDAADoLL8XFYyIaNkYZLPZwnqAMosKAgAQfoK2qGBpaWmnCgMAAOhKfoedYcOGBaMOAACAoOjwruclJSU6ePCg6uvrfY5fe+21nS4KAAAgUPwOO59//rmuv/567d271ztWR5J3vZ1wHLMDAACsy++p5/fdd5/i4+P1z3/+U9HR0SouLtb777+vsWPH6r333gtCiQAAAB3nd8vO9u3btWXLFg0ePFgRERGKiIjQ+PHjlZOTo3vvvVe7d+8ORp0AAAAd4nfLTkNDg/r27StJOuOMM/T1119Lahq4/MknnwS2OqAbaWg0tP1ApV4tPKztByrV0OjXqhAAgDb43bKTnJysPXv2aPjw4UpJSVFubq569+6tp59+WsOHDw9GjYDlbSoq07KNJSrz1HqPxToitXR6kqYkx4awsu6rodHQztIjqqip1ZCYSI2LH6geEewFCIQjv8POQw89pGPHjkmSHn30UU2bNk3/7//9Pw0aNEgvv/xywAsEulpXf8ltKirTXWt36eR2nHJPre5au0urZo8h8HQxwidgLX6voNyaI0eOaMCAAWG7AzorKKNZV3/JNTQaGr98i8/vO5FNkssRqa2LJ9Gq0EXaCp/Nd5/wCZhHe7+//R6z889//rPFsYEDB8pms2nPnj3+vhxgGs1fcicHj+YWlk1FZQH/nTtLj7QZdCTJkFTmqdXO0iMB/91oqaHR0LKNJS2CjiTvsWUbSxhPBYQZv8POyJEj9dprr7U4/p//+Z9KSUkJSFFAVwvVl1xFTdtBpyPXoXMIn4A1+R12Fi9erFtuuUV33nmnjh8/rsOHD2vSpEl6/PHHGbODsBWqL7khMZEBvQ6dQ/gErMnvsPOLX/xCO3bs0AcffKBRo0Zp1KhRioqK0p49e9gqAmErVF9y4+IHKtYRqbZG49jUNGZoXPzAgP5etI7wCViT32FHkoYPH64LLrhAX3zxhaqrq3XzzTfL6XQGujagy4TqS65HhE1LpydJUovA0/x86fQkBid3EcInYE1+h53mFp3PPvtMe/bs0apVq3TPPffo5ptvVlVVVTBqBIIulF9yU5JjtWr2GLkcvkHK5Yhk5k8XI3wC1uT31HO73a6f//zn+vWvf61evXpJkg4cOKAf/ehHOnjwoL766qugFBpMTD2H9O/ZWJJ8Bip31ZRjFrEzD9bZAcJDe7+//Q47+fn5mjBhQovjjY2Neuyxx/Twww/7X22IEXbQjC85NCN8AuYXtLBjRYQdnIgvOQAIDwFfVPDqq6+Wx+PxPn/sscf0zTffeJ9XVlYqKSmpY9UCJtIjwqbUhEGaceFQpSYMIugAQJhrd9h56623VFdX532+fPlyHTny7zVHvv/+e3Y9BwAAptPusHNybxe9XwAAIBx0aJ0dAACAcNHusGOz2Vrsah6uu5wDAIDuo2d7LzQMQ3PmzJHdbpck1dbW6s4771SfPn0kyWc8DwAAgFm0O+xkZGT4PJ89e3aLa26//fbOVwQAABBA7Q47q1evDmYdAAAAQcEAZQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmmDzuHDx/W7NmzNWjQIEVHR+vCCy/Uxx9/7D1vGIaysrLkdrsVFRWliRMnqri4OIQVAwAAMzF12KmqqtKll16qXr166c0331RJSYmeeOIJ9e/f33tNbm6uVqxYoZUrV6qgoEAul0vp6emqqakJXeEAAMA0bIZhGKEuoi0PPPCAPvjgA/3P//xPq+cNw5Db7VZmZqYWL14sqWn3dafTqeXLl2vevHnt+j3V1dVyOBzyeDzq169fwOoHAADB097vb1O37Lz22msaO3asbrrpJg0ZMkQXXXSRnnnmGe/50tJSlZeXa/Lkyd5jdrtdEyZM0LZt29p83bq6OlVXV/s8AACANZk67Hz++edatWqVEhMT9dZbb+nOO+/Uvffeq+eee06SVF5eLklyOp0+P+d0Or3nWpOTkyOHw+F9xMXFBe9NAACAkDJ12GlsbNSYMWOUnZ2tiy66SPPmzdPcuXO1atUqn+tsNpvPc8MwWhw70ZIlS+TxeLyPQ4cOBaV+AAAQeqYOO7GxsUpKSvI5dv755+vgwYOSJJfLJUktWnEqKipatPacyG63q1+/fj4PAABgTaYOO5deeqk++eQTn2Offvqphg0bJkmKj4+Xy+VSXl6e93x9fb3y8/OVlpbWpbWiazQ0Gtp+oFKvFh7W9gOVamg07fh6AIBJ9Ax1Aafy85//XGlpacrOztbNN9+snTt36umnn9bTTz8tqan7KjMzU9nZ2UpMTFRiYqKys7MVHR2tWbNmhbh6BNqmojIt21iiMk+t91isI1JLpydpSnJsCCsDAJiZqaeeS9Lrr7+uJUuWaP/+/YqPj9eCBQs0d+5c73nDMLRs2TL9+c9/VlVVlVJSUvTHP/5RycnJ7f4dTD03v01FZbpr7S6d/GFtHpm1avYYAg8AdDPt/f42fdjpCoQdc2toNDR++RafFp0T2SS5HJHauniSekS0PTAdAGAtllhnB5CknaVH2gw6kmRIKvPUamfpka4rCgAQNgg7ML2KmraDTkeuAwB0L4QdmN6QmMiAXgcA6F4IOzC9cfEDFeuIVFujcWxqmpU1Ln5gV5YFAAgThB34MOM6Nj0ibFo6vWlxyZMDT/PzpdOTAjY42Yz3AADQcaZeZwddy8zr2ExJjtWq2WNa1OcKcH1mvgcAgI5h6rmYei6Fzzo2DY2GdpYeUUVNrYbENHVdBapFJ1zuAQCgCVPP0W4NjYaWbSxp8SUvyXts2cYSU3Tn9IiwKTVhkGZcOFSpCYMC2nUVLvcAAOAfwg5Yx0bcAwCwMsIOWMdG3AMAsDLCDljHRtwDALAywg5Yx0bcAwCwMsIOunwdGzPiHgCAdRF2IOnf69i4HL7dNC5HZLeZcs09AABrYp0dsc7OiYK5jk244B4AQHho7/c3KyjDR/M6Nt0Z9wAArIVuLAAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGmEHQAAYGk9Q10AYDYNjYZ2lh5RRU2thsREalz8QPWIsIW6LABABxF2gBNsKirTso0lKvPUeo/FOiK1dHqSpiTHhrAyAEBH0Y0F/MumojLdtXaXT9CRpHJPre5au0ubispCVBkAoDMIO4Cauq6WbSyR0cq55mPLNpaoobG1KwAAZkbYASTtLD3SokXnRIakMk+tdpYe6bqiAAABQdgBJFXUtB10OnIdAMA8CDuApCExkQG9DgBgHoQdQNK4+IGKdUSqrQnmNjXNyhoXP7ArywIABICpw05WVpZsNpvPw+Vyec8bhqGsrCy53W5FRUVp4sSJKi4uDmHFCFc9ImxaOj1JkloEnubnS6cnsd4OAIQhU4cdSbrgggtUVlbmfezdu9d7Ljc3VytWrNDKlStVUFAgl8ul9PR01dTUhLBihKspybFaNXuMXA7friqXI1KrZo9hnR0ACFOmX1SwZ8+ePq05zQzD0JNPPqkHH3xQN9xwgyRpzZo1cjqdevHFFzVv3ryuLhUWMCU5VulJLlZQBgALMX3Lzv79++V2uxUfH69bb71Vn3/+uSSptLRU5eXlmjx5svdau92uCRMmaNu2bad8zbq6OlVXV/s8gGY9ImxKTRikGRcOVWrCIIIOAIQ5U4edlJQUPffcc3rrrbf0zDPPqLy8XGlpaaqsrFR5ebkkyel0+vyM0+n0nmtLTk6OHA6H9xEXFxe09wAAAELL1N1YU6dO9f575MiRSk1NVUJCgtasWaNLLrlEkmSz+f7VbRhGi2MnW7JkiRYsWOB9Xl1dbarAw0aUAAAEjqnDzsn69OmjkSNHav/+/bruuuskSeXl5YqN/ffA0YqKihatPSez2+2y2+3BLLXD2IgSAIDAMnU31snq6uq0b98+xcbGKj4+Xi6XS3l5ed7z9fX1ys/PV1paWgir7Dg2ogQAIPBMHXbuv/9+5efnq7S0VB9++KFuvPFGVVdXKyMjQzabTZmZmcrOztb69etVVFSkOXPmKDo6WrNmzQp16X5jI0oAAILD1N1YX331lW677Tb93//9nwYPHqxLLrlEO3bs0LBhwyRJixYt0vHjxzV//nxVVVUpJSVFmzdvVkxMTIgr958/G1GmJgzqusIAAAhzpg4769atO+V5m82mrKwsZWVldU1BQcRGlAAABIepu7G6EzaiBAAgOAg7JsFGlAAABAdhxyTYiBIAgOAg7JgIG1ECABB4ph6g3B2xESUAAIFF2DGh5o0oAQBA59GNBQAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALI2wAwAALK1nqAtAxzU0GtpZekQVNbUaEhOpcfED1SPCFuqyAAAwFcJOmNpUVKZlG0tU5qn1Hot1RGrp9CRNSY5tcT3BCADQXRF2wtCmojLdtXaXjJOOl3tqddfaXVo1e4xP4PE3GAEAYCWM2QmShkZD2w9U6tXCw9p+oFINjSdHk46/7rKNJS2CjiTvsWUbS7y/rzkYnRh0pH8Ho01FZQGpCwAAs6JlJwiC2ZKys/RIi+ByIkNSmadWO0uPaFz8wFMGI5uaglF6kosuLQCAZdGyE2DBbkmpqGk76Jx8nT/BCAAAqyLsBJC/XUwdMSQmst3X+ROMAACwKsJOAHVFS8q4+IGKdUSqrU4nm5q6zMbFD/QrGAEAYFWEnQDqipaUHhE2LZ2eJEktAk/z86XTk9QjwuZXMAIAwKoIOwHUVS0pU5JjtWr2GLkcvq/jckT6TDv3JxgBAGBVzMYKoOaWlHJPbavjdmxqCiSBaEmZkhyr9CTXaRcKbA5GJ88Oc7HODgCgm7AZhhGYBWDCWHV1tRwOhzwej/r169ep12qejSXJJ/A0R5CTF/zrKqygDACwmvZ+fxN2FNiwI7FiMQAAXaG93990YwVBe7uYAABA8BF2gqRHhE2pCYNCXQYAAN0eYceEGF8DAEDghNXU85ycHNlsNmVmZnqPGYahrKwsud1uRUVFaeLEiSouLg5dkZ20qahM45dv0W3P7NB96wp12zM7NH75FjbsBACgg8Im7BQUFOjpp5/WqFGjfI7n5uZqxYoVWrlypQoKCuRyuZSenq6ampoQVdpx7FAOAEDghUXYOXr0qH74wx/qmWee0YABA7zHDcPQk08+qQcffFA33HCDkpOTtWbNGn377bd68cUXQ1ix/7piXy0AALqjsAg7d999t6655hpdeeWVPsdLS0tVXl6uyZMne4/Z7XZNmDBB27Zta/P16urqVF1d7fMINXYoBwAgOEw/QHndunXatWuXCgoKWpwrLy+XJDmdTp/jTqdTX375ZZuvmZOTo2XLlgW20E5ih3IAAILD1C07hw4d0n333ae1a9cqMrLt/aRsNt+ZSoZhtDh2oiVLlsjj8Xgfhw4dCljNHcUO5QAABIepW3Y+/vhjVVRU6OKLL/Yea2ho0Pvvv6+VK1fqk08+kdTUwhMb+++ViSsqKlq09pzIbrfLbrcHr/AO6Mp9tQAA6E5M3bJzxRVXaO/evSosLPQ+xo4dqx/+8IcqLCzU8OHD5XK5lJeX5/2Z+vp65efnKy0tLYSV+48dygEACA5Tt+zExMQoOTnZ51ifPn00aNAg7/HMzExlZ2crMTFRiYmJys7OVnR0tGbNmhWKkjuFHcoBAAg8U4ed9li0aJGOHz+u+fPnq6qqSikpKdq8ebNiYmJCXVqHsK8WAACBxa7nCvyu5wAAIPja+/1t6jE7AAAAnUXYAQAAlkbYAQAAlkbYAQAAlkbYAQAAlkbYAQAAlkbYAQAAlkbYAQAAlkbYAQAAlhb220UEQvMi0tXV1SGuBAAAtFfz9/bpNoMg7EiqqamRJMXFxYW4EgAA4K+amho5HI42z7M3lqTGxkZ9/fXXiomJkc1mvQ03q6urFRcXp0OHDrH3VydxLwOL+xk43MvA4n4GTjDvpWEYqqmpkdvtVkRE2yNzaNmRFBERoTPPPDPUZQRdv379+I82QLiXgcX9DBzuZWBxPwMnWPfyVC06zRigDAAALI2wAwAALI2w0w3Y7XYtXbpUdrs91KWEPe5lYHE/A4d7GVjcz8Axw71kgDIAALA0WnYAAIClEXYAAIClEXYAAIClEXYAAIClEXYsKisrSzabzefhcrlCXVbYeP/99zV9+nS53W7ZbDZt2LDB57xhGMrKypLb7VZUVJQmTpyo4uLi0BQbBk53P+fMmdPi83rJJZeEplgTy8nJ0Q9+8APFxMRoyJAhuu666/TJJ5/4XMNns/3acz/5bLbfqlWrNGrUKO/igampqXrzzTe950P52STsWNgFF1ygsrIy72Pv3r2hLilsHDt2TKNHj9bKlStbPZ+bm6sVK1Zo5cqVKigokMvlUnp6unefNfg63f2UpClTpvh8Xt94440urDA85Ofn6+6779aOHTuUl5en77//XpMnT9axY8e81/DZbL/23E+Jz2Z7nXnmmfrNb36jjz76SB999JEmTZqkGTNmeANNSD+bBixp6dKlxujRo0NdhiVIMtavX+993tjYaLhcLuM3v/mN91htba3hcDiMp556KgQVhpeT76dhGEZGRoYxY8aMkNQTzioqKgxJRn5+vmEYfDY76+T7aRh8NjtrwIABxl/+8peQfzZp2bGw/fv3y+12Kz4+Xrfeeqs+//zzUJdkCaWlpSovL9fkyZO9x+x2uyZMmKBt27aFsLLw9t5772nIkCE699xzNXfuXFVUVIS6JNPzeDySpIEDB0ris9lZJ9/PZnw2/dfQ0KB169bp2LFjSk1NDflnk7BjUSkpKXruuef01ltv6ZlnnlF5ebnS0tJUWVkZ6tLCXnl5uSTJ6XT6HHc6nd5z8M/UqVP1wgsvaMuWLXriiSdUUFCgSZMmqa6uLtSlmZZhGFqwYIHGjx+v5ORkSXw2O6O1+ynx2fTX3r171bdvX9ntdt15551av369kpKSQv7ZZNdzi5o6dar33yNHjlRqaqoSEhK0Zs0aLViwIISVWYfNZvN5bhhGi2Non1tuucX77+TkZI0dO1bDhg3T3//+d91www0hrMy8fvazn2nPnj3aunVri3N8Nv3X1v3ks+mfESNGqLCwUN98843++7//WxkZGcrPz/eeD9Vnk5adbqJPnz4aOXKk9u/fH+pSwl7zrLaT/xqpqKho8VcLOiY2NlbDhg3j89qGe+65R6+99preffddnXnmmd7jfDY7pq372Ro+m6fWu3dvnXPOORo7dqxycnI0evRo/e53vwv5Z5Ow003U1dVp3759io2NDXUpYS8+Pl4ul0t5eXneY/X19crPz1daWloIK7OOyspKHTp0iM/rSQzD0M9+9jO98sor2rJli+Lj433O89n0z+nuZ2v4bPrHMAzV1dWF/LNJN5ZF3X///Zo+fbrOOussVVRU6NFHH1V1dbUyMjJCXVpYOHr0qD777DPv89LSUhUWFmrgwIE666yzlJmZqezsbCUmJioxMVHZ2dmKjo7WrFmzQli1eZ3qfg4cOFBZWVmaOXOmYmNj9cUXX+iXv/ylzjjjDF1//fUhrNp87r77br344ot69dVXFRMT4/0r2eFwKCoqSjabjc+mH053P48ePcpn0w+//OUvNXXqVMXFxammpkbr1q3Te++9p02bNoX+sxn0+V4IiVtuucWIjY01evXqZbjdbuOGG24wiouLQ11W2Hj33XcNSS0eGRkZhmE0TfFdunSp4XK5DLvdblx22WXG3r17Q1u0iZ3qfn777bfG5MmTjcGDBxu9evUyzjrrLCMjI8M4ePBgqMs2ndbuoSRj9erV3mv4bLbf6e4nn03/3HHHHcawYcOM3r17G4MHDzauuOIKY/Pmzd7zofxs2gzDMIIfqQAAAEKDMTsAAMDSCDsAAMDSCDsAAMDSCDsAAMDSCDsAAMDSCDsAAMDSCDsAAMDSCDsAAMDSCDsAwsbEiROVmZkZ6jIAhBnCDoAOq6io0Lx583TWWWfJbrfL5XLpqquu0vbt273X2Gw2bdiwIXRFnuCLL76QzWZTYWFhi3MEKcC62AgUQIfNnDlT3333ndasWaPhw4frn//8p9555x0dOXIk1KWZUn19vXr37h3qMoBuh5YdAB3yzTffaOvWrVq+fLkuv/xyDRs2TOPGjdOSJUt0zTXXSJLOPvtsSdL1118vm83mfT5nzhxdd911Pq+XmZmpiRMnep8fO3ZMt99+u/r27avY2Fg98cQTPtf/6le/0siRI1vUdfHFF+uRRx7p9PurqqrS7bffrgEDBig6OlpTp07V/v37veezsrJ04YUX+vzMk08+6X2P0r/fZ05Ojtxut84991xJ0p/+9CclJiYqMjJSTqdTN954Y6frBdA2wg6ADunbt6/69u2rDRs2qK6urtVrCgoKJEmrV69WWVmZ93l7LFy4UO+++67Wr1+vzZs367333tPHH3/sPX/HHXeopKTE5zX37Nmj3bt3a86cOR17UyeYM2eOPvroI7322mvavn27DMPQ1Vdfre+++86v13nnnXe0b98+5eXl6fXXX9dHH32ke++9V7/61a/0ySefaNOmTbrssss6XS+AttGNBaBDevbsqWeffVZz587VU089pTFjxmjChAm69dZbNWrUKEnS4MGDJUn9+/eXy+Vq92sfPXpUf/3rX/Xcc88pPT1dkrRmzRqdeeaZ3mvOPPNMXXXVVVq9erV+8IMfSGoKVRMmTNDw4cNP+fppaWmKiPD9W+/48ePelpr9+/frtdde0wcffKC0tDRJ0gsvvKC4uDht2LBBN910U7vfS58+ffSXv/zF2331yiuvqE+fPpo2bZpiYmI0bNgwXXTRRe1+PQD+o2UHQIfNnDlTX3/9tV577TVdddVVeu+99zRmzBg9++yznXrdAwcOqL6+Xqmpqd5jAwcO1IgRI3yumzt3rl566SXV1tbqu+++0wsvvKA77rjjtK//8ssvq7Cw0OcxduxY7/l9+/apZ8+eSklJ8R4bNGiQRowYoX379vn1XkaOHOkzTic9PV3Dhg3T8OHD9aMf/UgvvPCCvv32W79eE4B/CDsAOiUyMlLp6el65JFHtG3bNs2ZM0dLly495c9ERETIMAyfYyd2D518ri3Tp0+X3W7X+vXrtXHjRtXV1WnmzJmn/bm4uDidc845Po+oqKjT/n7DMGSz2dr1Hpr16dPH53lMTIx27dqll156SbGxsXrkkUc0evRoffPNN6etG0DHEHYABFRSUpKOHTvmfd6rVy81NDT4XDN48GCVlZX5HDtxOvg555yjXr16aceOHd5jVVVV+vTTT31+pmfPnsrIyNDq1au1evVq3XrrrYqOjg7Ie/j+++/14Ycfeo9VVlbq008/1fnnn+99D+Xl5T6Bp7Up7a3p2bOnrrzySuXm5mrPnj364osvtGXLlk7XDaB1jNkB0CGVlZW66aabdMcdd2jUqFGKiYnRRx99pNzcXM2YMcN73dlnn6133nlHl156qex2uwYMGKBJkybp8ccf13PPPafU1FStXbtWRUVF3rErffv21U9+8hMtXLhQgwYNktPp1IMPPthinI0k/fSnP/UGkA8++CAg7y0xMVEzZszQ3Llz9ec//1kxMTF64IEHNHToUO97mzhxov73f/9Xubm5uvHGG7Vp0ya9+eab6tev3ylf+/XXX9fnn3+uyy67TAMGDNAbb7yhxsbGFl10AAKHlh0AHdK3b1+lpKTot7/9rS677DIlJyfr4Ycf1ty5c7Vy5UrvdU888YTy8vIUFxfnDTNXXXWVHn74YS1atEg/+MEPVFNTo9tvv93n9R9//HFddtlluvbaa3XllVdq/Pjxuvjii1vUkZiYqLS0NI0YMcJnjE1nrV69WhdffLGmTZum1NRUGYahN954Q7169ZIknX/++frTn/6kP/7xjxo9erR27typ+++//7Sv279/f73yyiuaNGmSzj//fD311FN66aWXdMEFFwSsdgC+bEZ7O8cBwIQMw9B5552nefPmacGCBaEuB4AJ0Y0FIGxVVFTo+eef1+HDh/XjH/841OUAMCnCDoCw5XQ6dcYZZ+jpp5/WgAEDQl0OAJMi7AAIW/TCA2gPBigDAABLI+wAAABLI+wAAABLI+wAAABLI+wAAABLI+wAAABLI+wAAABLI+wAAABL+//XZIbHUfObIQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(df_data['Study Hours'], df_data['Exam Score'])\n",
    "plt.xlabel('Study Hours')\n",
    "plt.ylabel('Exam Score')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "3e415e87-3ec4-4a2b-87ee-90185a1fa6f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# independent and dependent features\n",
    "\n",
    "X=df_data[['Study Hours']] # X dataframe olmalı.\n",
    "y=df_data['Exam Score']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "dfc9100f-c81a-4764-a687-1c24c619a001",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "151cf67c-2e12-412b-893c-c474223f174f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.series.Series"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b1cb94d0-9cbe-4ea9-a3c8-996d1a9c5491",
   "metadata": {},
   "outputs": [],
   "source": [
    "# test - train  split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2157da70-eb3b-499c-b195-80d756183cb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e21aa74c-8c5f-4198-bbaf-4e05d723e60f",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3b777445-e152-4cd6-8c17-f270fd8997e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18     64.9\n",
       "1      57.1\n",
       "2      42.7\n",
       "32     89.6\n",
       "6      77.1\n",
       "3      65.1\n",
       "29     82.4\n",
       "26     64.8\n",
       "9      84.6\n",
       "4      78.7\n",
       "28     79.1\n",
       "10     92.4\n",
       "27     79.5\n",
       "13    100.0\n",
       "17     74.7\n",
       "15     97.0\n",
       "22     76.5\n",
       "31     96.2\n",
       "11     95.9\n",
       "7      90.8\n",
       "0      40.0\n",
       "23     42.2\n",
       "5      78.8\n",
       "12     92.0\n",
       "21     58.5\n",
       "8      99.0\n",
       "Name: Exam Score, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "cd3a2930-0e4a-4f0d-8786-0f55cc9fc93f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25    42.4\n",
       "14    86.6\n",
       "30    91.5\n",
       "16    57.2\n",
       "24    51.2\n",
       "20    49.0\n",
       "19    84.7\n",
       "Name: Exam Score, dtype: float64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "bc182219-8aa1-46e4-ba80-acbbb81d4590",
   "metadata": {},
   "outputs": [],
   "source": [
    "# standardize the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "8a0ed4b0-3944-444d-ae36-a0c30dac1d36",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0fefa1cf-ce44-468d-9c3b-298fe0328d25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Study Hours</th>\n",
       "      <th>Exam Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.9</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9.6</td>\n",
       "      <td>57.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4.5</td>\n",
       "      <td>42.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.4</td>\n",
       "      <td>65.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>14.4</td>\n",
       "      <td>78.7</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Study Hours  Exam Score\n",
       "0          3.9        40.0\n",
       "1          9.6        57.1\n",
       "2          4.5        42.7\n",
       "3         11.4        65.1\n",
       "4         14.4        78.7"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a2355995-a74f-45f8-8a1a-6ce15eacd84e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# balanced feature values\n",
    "# efficient gradient descent\n",
    "# l1, l2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8136b901-c5aa-4c80-80c6-28712a92c305",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = StandardScaler() # Verileri ortak bir dile çevirir. Algoritmalar daha sağlıklı çalışır. \n",
    "                          # Standardization ortalama = 0 , Standart Sapma = 1 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d0708112-0d28-40c4-b434-03347a896950",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test) # fit -> data leakage"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "45b91c93-8d7f-427f-b164-b62b5730f798",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.11794385],\n",
       "       [-0.97424848],\n",
       "       [-1.68837424],\n",
       "       [ 0.32798083],\n",
       "       [ 0.36998823],\n",
       "       [-0.7222041 ],\n",
       "       [ 0.41199563],\n",
       "       [-0.97424848],\n",
       "       [ 0.11794385],\n",
       "       [-0.30213013],\n",
       "       [ 0.15995124],\n",
       "       [ 0.66404001],\n",
       "       [-0.13410054],\n",
       "       [ 1.50418796],\n",
       "       [-0.51216711],\n",
       "       [ 0.15995124],\n",
       "       [-0.30213013],\n",
       "       [ 1.21013618],\n",
       "       [ 1.33615837],\n",
       "       [ 0.7900622 ],\n",
       "       [-1.77238903],\n",
       "       [-1.89841122],\n",
       "       [ 0.20195864],\n",
       "       [ 1.88225453],\n",
       "       [-1.18428547],\n",
       "       [ 1.21013618]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "bb8b45ab-a62c-4551-9dab-9186a13acfed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.60435944],\n",
       "       [ 0.62203261],\n",
       "       [ 0.95809179],\n",
       "       [-1.52034465],\n",
       "       [-0.97424848],\n",
       "       [-1.77238903],\n",
       "       [ 0.66404001]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "39a45cc0-2475-4bea-8e2a-955e5b9a5a5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "75a2dbd3-6c2e-4142-8f6e-5a94692f9112",
   "metadata": {},
   "outputs": [],
   "source": [
    "regression = LinearRegression() # n_jobs = -1 (Laptoptaki bütün CPU'ları kullanır.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "fc586829-0b57-4e74-b273-abf1f2b2411d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {\n",
       "  /* Definition of color scheme common for light and dark mode */\n",
       "  --sklearn-color-text: black;\n",
       "  --sklearn-color-line: gray;\n",
       "  /* Definition of color scheme for unfitted estimators */\n",
       "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
       "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
       "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
       "  --sklearn-color-unfitted-level-3: chocolate;\n",
       "  /* Definition of color scheme for fitted estimators */\n",
       "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
       "  --sklearn-color-fitted-level-1: #d4ebff;\n",
       "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
       "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
       "\n",
       "  /* Specific color for light theme */\n",
       "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
       "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
       "  --sklearn-color-icon: #696969;\n",
       "\n",
       "  @media (prefers-color-scheme: dark) {\n",
       "    /* Redefinition of color scheme for dark theme */\n",
       "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
       "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
       "    --sklearn-color-icon: #878787;\n",
       "  }\n",
       "}\n",
       "\n",
       "#sk-container-id-1 {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 pre {\n",
       "  padding: 0;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-hidden--visually {\n",
       "  border: 0;\n",
       "  clip: rect(1px 1px 1px 1px);\n",
       "  clip: rect(1px, 1px, 1px, 1px);\n",
       "  height: 1px;\n",
       "  margin: -1px;\n",
       "  overflow: hidden;\n",
       "  padding: 0;\n",
       "  position: absolute;\n",
       "  width: 1px;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-dashed-wrapped {\n",
       "  border: 1px dashed var(--sklearn-color-line);\n",
       "  margin: 0 0.4em 0.5em 0.4em;\n",
       "  box-sizing: border-box;\n",
       "  padding-bottom: 0.4em;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-container {\n",
       "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
       "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
       "     so we also need the `!important` here to be able to override the\n",
       "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
       "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
       "  display: inline-block !important;\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-text-repr-fallback {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       "div.sk-parallel-item,\n",
       "div.sk-serial,\n",
       "div.sk-item {\n",
       "  /* draw centered vertical line to link estimators */\n",
       "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
       "  background-size: 2px 100%;\n",
       "  background-repeat: no-repeat;\n",
       "  background-position: center center;\n",
       "}\n",
       "\n",
       "/* Parallel-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item::after {\n",
       "  content: \"\";\n",
       "  width: 100%;\n",
       "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
       "  flex-grow: 1;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel {\n",
       "  display: flex;\n",
       "  align-items: stretch;\n",
       "  justify-content: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  position: relative;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
       "  align-self: flex-end;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
       "  align-self: flex-start;\n",
       "  width: 50%;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
       "  width: 0;\n",
       "}\n",
       "\n",
       "/* Serial-specific style estimator block */\n",
       "\n",
       "#sk-container-id-1 div.sk-serial {\n",
       "  display: flex;\n",
       "  flex-direction: column;\n",
       "  align-items: center;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  padding-right: 1em;\n",
       "  padding-left: 1em;\n",
       "}\n",
       "\n",
       "\n",
       "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
       "clickable and can be expanded/collapsed.\n",
       "- Pipeline and ColumnTransformer use this feature and define the default style\n",
       "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
       "*/\n",
       "\n",
       "/* Pipeline and ColumnTransformer style (default) */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable {\n",
       "  /* Default theme specific background. It is overwritten whether we have a\n",
       "  specific estimator or a Pipeline/ColumnTransformer */\n",
       "  background-color: var(--sklearn-color-background);\n",
       "}\n",
       "\n",
       "/* Toggleable label */\n",
       "#sk-container-id-1 label.sk-toggleable__label {\n",
       "  cursor: pointer;\n",
       "  display: block;\n",
       "  width: 100%;\n",
       "  margin-bottom: 0;\n",
       "  padding: 0.5em;\n",
       "  box-sizing: border-box;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
       "  /* Arrow on the left of the label */\n",
       "  content: \"▸\";\n",
       "  float: left;\n",
       "  margin-right: 0.25em;\n",
       "  color: var(--sklearn-color-icon);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
       "  color: var(--sklearn-color-text);\n",
       "}\n",
       "\n",
       "/* Toggleable content - dropdown */\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content {\n",
       "  max-height: 0;\n",
       "  max-width: 0;\n",
       "  overflow: hidden;\n",
       "  text-align: left;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content pre {\n",
       "  margin: 0.2em;\n",
       "  border-radius: 0.25em;\n",
       "  color: var(--sklearn-color-text);\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
       "  /* Expand drop-down */\n",
       "  max-height: 200px;\n",
       "  max-width: 100%;\n",
       "  overflow: auto;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
       "  content: \"▾\";\n",
       "}\n",
       "\n",
       "/* Pipeline/ColumnTransformer-specific style */\n",
       "\n",
       "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator-specific style */\n",
       "\n",
       "/* Colorize estimator box */\n",
       "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  /* The background is the default theme color */\n",
       "  color: var(--sklearn-color-text-on-default-background);\n",
       "}\n",
       "\n",
       "/* On hover, darken the color of the background */\n",
       "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "/* Label box, darken color on hover, fitted */\n",
       "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
       "  color: var(--sklearn-color-text);\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Estimator label */\n",
       "\n",
       "#sk-container-id-1 div.sk-label label {\n",
       "  font-family: monospace;\n",
       "  font-weight: bold;\n",
       "  display: inline-block;\n",
       "  line-height: 1.2em;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-label-container {\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       "/* Estimator-specific */\n",
       "#sk-container-id-1 div.sk-estimator {\n",
       "  font-family: monospace;\n",
       "  border: 1px dotted var(--sklearn-color-border-box);\n",
       "  border-radius: 0.25em;\n",
       "  box-sizing: border-box;\n",
       "  margin-bottom: 0.5em;\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-0);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-0);\n",
       "}\n",
       "\n",
       "/* on hover */\n",
       "#sk-container-id-1 div.sk-estimator:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-2);\n",
       "}\n",
       "\n",
       "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-2);\n",
       "}\n",
       "\n",
       "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
       "\n",
       "/* Common style for \"i\" and \"?\" */\n",
       "\n",
       ".sk-estimator-doc-link,\n",
       "a:link.sk-estimator-doc-link,\n",
       "a:visited.sk-estimator-doc-link {\n",
       "  float: right;\n",
       "  font-size: smaller;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1em;\n",
       "  height: 1em;\n",
       "  width: 1em;\n",
       "  text-decoration: none !important;\n",
       "  margin-left: 1ex;\n",
       "  /* unfitted */\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted,\n",
       "a:link.sk-estimator-doc-link.fitted,\n",
       "a:visited.sk-estimator-doc-link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
       ".sk-estimator-doc-link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover,\n",
       "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
       ".sk-estimator-doc-link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "/* Span, style for the box shown on hovering the info icon */\n",
       ".sk-estimator-doc-link span {\n",
       "  display: none;\n",
       "  z-index: 9999;\n",
       "  position: relative;\n",
       "  font-weight: normal;\n",
       "  right: .2ex;\n",
       "  padding: .5ex;\n",
       "  margin: .5ex;\n",
       "  width: min-content;\n",
       "  min-width: 20ex;\n",
       "  max-width: 50ex;\n",
       "  color: var(--sklearn-color-text);\n",
       "  box-shadow: 2pt 2pt 4pt #999;\n",
       "  /* unfitted */\n",
       "  background: var(--sklearn-color-unfitted-level-0);\n",
       "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link.fitted span {\n",
       "  /* fitted */\n",
       "  background: var(--sklearn-color-fitted-level-0);\n",
       "  border: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "\n",
       ".sk-estimator-doc-link:hover span {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link {\n",
       "  float: right;\n",
       "  font-size: 1rem;\n",
       "  line-height: 1em;\n",
       "  font-family: monospace;\n",
       "  background-color: var(--sklearn-color-background);\n",
       "  border-radius: 1rem;\n",
       "  height: 1rem;\n",
       "  width: 1rem;\n",
       "  text-decoration: none;\n",
       "  /* unfitted */\n",
       "  color: var(--sklearn-color-unfitted-level-1);\n",
       "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
       "  /* fitted */\n",
       "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
       "  color: var(--sklearn-color-fitted-level-1);\n",
       "}\n",
       "\n",
       "/* On hover */\n",
       "#sk-container-id-1 a.estimator_doc_link:hover {\n",
       "  /* unfitted */\n",
       "  background-color: var(--sklearn-color-unfitted-level-3);\n",
       "  color: var(--sklearn-color-background);\n",
       "  text-decoration: none;\n",
       "}\n",
       "\n",
       "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
       "  /* fitted */\n",
       "  background-color: var(--sklearn-color-fitted-level-3);\n",
       "}\n",
       "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.4/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
      ],
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regression.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "033f6ee3-b7e0-42a0-90e8-16099f96ed40",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficient:  [16.17860223]\n",
      "Intercept:  76.9076923076923\n"
     ]
    }
   ],
   "source": [
    "print(\"Coefficient: \", regression.coef_)\n",
    "print(\"Intercept: \", regression.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "e6813bbb-4ef7-4e2b-b36e-b52f288ac876",
   "metadata": {},
   "outputs": [],
   "source": [
    "# y = (76.91 + 16,18.x )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "39b22a4b-50d9-43c4-b51b-cfacc787f64f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X_train, y_train)\n",
    "plt.plot(X_train, regression.predict(X_train), \"r\")\n",
    "plt.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a4c65fe9-3601-4ddd-9682-1350e2174a32",
   "metadata": {},
   "outputs": [],
   "source": [
    "# x = 20, y=?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "2b7e2520-5da0-4cb5-a68d-5b7acfd31db9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([400.47973694])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regression.predict([[20]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "2ac9f41a-7d66-4e4f-ae9d-2e9e1bdcc779",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[0.48200796]])"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler.transform([[20]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "98e5b37d-5632-4f8d-9030-9751c2db9872",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([84.70590731])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regression.predict(scaler.transform([[20]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "7e8fff3f-4c3d-4b48-8dc6-21e7f10fdc11",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\ProgramData\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:493: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([62.05187491])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regression.predict(scaler.transform([[10]]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "82ae7118-2d01-4a15-b030-2e0cb6e427a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# prediction with test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "a22c9081-e1de-4283-bc6d-4d5a69aac5b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred_test = regression.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "3fe89370-f21d-458d-948d-7a687c81526b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "25    42.4\n",
       "14    86.6\n",
       "30    91.5\n",
       "16    57.2\n",
       "24    51.2\n",
       "20    49.0\n",
       "19    84.7\n",
       "Name: Exam Score, dtype: float64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "2cef7a88-083d-4710-8544-ec1d24829b0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(y_pred_test, y_test)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "48d6011b-2ae9-42ae-b238-20255cfd7c1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3132a33c-e3f4-40ad-bd72-c1fae863c72b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse:  29.45839048833392\n",
      "mae:  4.054868128856142\n",
      "rmse:  5.427558427906043\n"
     ]
    }
   ],
   "source": [
    "mse = mean_squared_error(y_test, y_pred_test)\n",
    "mae = mean_absolute_error(y_test, y_pred_test)\n",
    "rmse = np.sqrt(mse)\n",
    "print(\"mse: \", mse)\n",
    "print(\"mae: \", mae)\n",
    "print(\"rmse: \", rmse)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "4876632f-fe04-4585-a75d-5d2bf903828a",
   "metadata": {},
   "outputs": [],
   "source": [
    "r2 = r2_score(y_test, y_pred_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "f8afc306-2095-49c1-adfe-ac6a0e9b1cf1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r2_score:  0.9196596206825491\n"
     ]
    }
   ],
   "source": [
    "print(\"r2_score: \", r2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "8c4a2b5b-84ff-47c6-8ab2-052dbfb33b1a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25     1.348231\n",
      "14     6.015010\n",
      "30     4.810138\n",
      "16    -0.160893\n",
      "24     1.368463\n",
      "20    17.556837\n",
      "19     2.702001\n",
      "Name: Exam Score, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# adjusted r2 score\n",
    "Adj_r2 = 1-(1-r2)*(y_test-1)/(y_test-y_pred_test-1)\n",
    "print(Adj_r2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2e966b09-bfed-4860-806b-1b70d071a700",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba9ae744-bf1c-40be-a68d-41ac233394a8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
